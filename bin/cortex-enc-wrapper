#!/bin/env python

import configparser
import os
import sys
import syslog
import warnings

import requests

################################################################################

def cache_catalog(certname, catalog, cache_dir):
	"""Caches the catalog for the given node to disk"""

	# Open the file for writing
	with open(os.path.join(cache_dir, certname), 'w') as f:
		# Write the catalog
		f.write(catalog)

################################################################################

def print_catalog(certname, cache_dir):
	"""Reads the catalog from disk (if possible) and then prints it out. Returns 0 on success and 1 on error"""

	try:
		# Open the catalog, read it and print it out
		with open(os.path.join(cache_dir, certname), 'r') as f:
			print(f.read())
	except Exception:
		return 1

	return 0

################################################################################

# Validate arguments
if len(sys.argv) <= 1:
	print("Usage: cortex-env-wrapper <nodename>", file=sys.stderr)
	sys.exit(1)

# Open syslog
syslog.openlog(logoption=syslog.LOG_PID, facility=syslog.LOG_USER)

# Read config file
config = configparser.RawConfigParser()
try:
	config.read('/data/cortex/enc.conf')
except Exception as e:
	print("Failed to read configuration: " + str(e), file=sys.stderr)
	syslog.syslog(syslog.LOG_ERR, "Failed to read configuration: " + str(e))
	sys.exit(1)

try:
	cache_dir = config.get('enc', 'cache_dir')
	cortex_url = config.get('enc', 'cortex_url')
	auth_token = config.get('enc', 'auth_token')
	if config.has_option('enc', 'ssl_verify'):
		ssl_verify = config.getboolean('enc', 'ssl_verify')
	else:
		ssl_verify = True
	if config.has_option('enc', 'limit_to_nodes'):
		limit_to_nodes = [entry.strip().lower() for entry in config.get('enc', 'limit_to_nodes').split(',')]
	else:
		limit_to_nodes = None
except Exception as e:
	print('Failed to get configuration option: ' + str(e), file=sys.stderr)
	syslog.syslog(syslog.LOG_ERR, "Failed to get configuration option: " + str(e))
	sys.exit(1)

# Get the certname of the node to find
certname = sys.argv[1]

# If we're not restricted to a node set, or we are but the requested node is in the set:
if limit_to_nodes is None or certname.lower() in limit_to_nodes:
	# Request the page, and don't print out the InsecureRequestWarning
	try:
		with warnings.catch_warnings():
			if not ssl_verify:
				import urllib3
				urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
			r = requests.get(cortex_url + '/' + certname, headers={'Accept': 'application/yml', 'X-Auth-Token': auth_token}, verify=ssl_verify)
	except Exception:
		# On exception, attempt to print cache
		sys.exit(print_catalog(certname, cache_dir))

	# On a 200 OK response, we should cache the catalog and print it out for the ENC
	if r.status_code == 200:
		# Cache the catalog to the file system
		cache_catalog(certname, r.text, cache_dir)

		# Return the catalog to Puppet
		print(r.text)
		sys.exit(0)

	# On a 404 Not Found response, print out an empty catalog
	elif r.status_code == 404:
		# Return blank catalog to Puppet
		print("classes:")
		syslog.syslog(syslog.LOG_WARNING, "Returning blank catalog - cortex returned 404 for node " + certname)
		sys.exit(0)

	# On any other response, attempt to return the cache
	else:
		syslog.syslog(syslog.LOG_WARNING, "Returning cached catalog - cortex returned " + str(r.status_code) + " for node " + certname)
		sys.exit(print_catalog(certname, cache_dir))

# We're restricted to a node set, and the node is missing
else:
	# Return blank catalog to Puppet
	print("classes:")
	syslog.syslog(syslog.LOG_WARNING, "Returning blank catalog - requested node " + certname + " is not in limit_to_nodes list")
	sys.exit(0)

# Shouldn't get here
sys.exit(1)
