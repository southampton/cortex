import datetime
import imp
import subprocess
import sys

import Pyro4


def psescape(s):
	"""Escapes a string so that it can be safely passed to PowerShell."""

	return s.replace("`", "``").replace("\"", "`\"").replace("\'", "`\'").replace("$", "`$")

class CortexWindowsRPC(object):
	"""The CortexWindowsRPC class is the remotely-callable object that performs
	Cortex-specific tasks."""

	def __init__(self):
		"""Initialises the CortexWindowsRPC object and loads its configuration"""

		# Read and execute the config
		d = imp.new_module('config')
		d.__file__ = 'cortex-windows-rpc.conf'
		try:
			with open('cortex-windows-rpc.conf') as config_file:
				exec(compile(config_file.read(), 'cortex-windows-rpc.conf', 'exec'), d.__dict__)
		except IOError as e:
			print("Failed to read configuration file: " + str(e), file=sys.stderr)
			sys.exit(1)

		# Extract config from loaded environment
		self.config = {}
		for key in dir(d):
			if key.isupper():
				self.config[key] = getattr(d, key)

		# Ensure we have required configuration options
		for wkey in ['POWERSHELL_PATH', 'TARGET_OU', 'GROUPS', 'MANAGED_BY', 'WINRPC_KEY', 'WINRPC_PORT', 'LOG_PATH']:
			if not wkey in self.config:
				print("Missing configuration option: " + wkey, file=sys.stderr)
				sys.exit(1)

		# Open the log file
		try:
			self.logfd = open(self.config['LOG_PATH'], 'ab', 0)
		except Exception as e:
			print("Error opening log file: " + str(e), file=sys.stderr)
			sys.exit(1)

	################################################################################

	def _log(self, state, message):
		try:
			self.logfd.write(datetime.datetime.now().strftime('%Y/%m/%d %H:%M:%S') + ': ' + str(state) + ': ' + str(message) + '\r\n')
		except Exception as e:
			print("Error writing to log file: " + str(e), file=sys.stderr)

	################################################################################

	@Pyro4.expose
	def move_to_default_ou(self, hostname):
		self._log('INFO', 'Moving hostname ' + str(hostname) + ' to default OU')

		try:
			subprocess.check_output([self.config['POWERSHELL_PATH'], '-Command', 'Get-ADComputer "' + psescape(hostname + '$') + '" | Move-ADObject -TargetPath "' + psescape(self.config['TARGET_OU']) + '"'], stderr=subprocess.STDOUT)
			return 0
		except subprocess.CalledProcessError as e:
			self._log('ERROR', 'PowerShell call to move ' + str(hostname) + ' to default OU returned ' + str(e.returncode))
			self._log('DEBUG', 'PowerShell output: ' + str(e.output))
			return e.returncode

	################################################################################

	@Pyro4.expose
	def join_groups(self, hostname, groups = None):
		self._log('INFO', 'Joining hostname ' + str(hostname) + ' to default groups')

		returncode = 0

		# Use the list of groups if supplied, otherwise use configured groups
		if groups is None:
			groups = self.config['GROUPS']

		for group in groups:
			self._log('INFO', 'Joining hostname to ' + str(hostname) + ' to ' + str(group))
			try:
				subprocess.check_output([self.config['POWERSHELL_PATH'], '-Command', 'Add-ADGroupMember -Identity "' + psescape(group) + '" -Members "' + psescape(hostname + '$') + '"'], stderr=subprocess.STDOUT)
			except subprocess.CalledProcessError as e:
				self._log('ERROR', 'Failed to join host ' + str(hostname) + ' to group ' + str(group))
				self._log('DEBUG', 'PowerShell output: ' + str(e.output))
				returncode = e.returncode

		return returncode

	################################################################################

	@Pyro4.expose
	def find_computer_object(self, hostname):
		self._log('INFO', 'Checking for computer object, ' + str(hostname))

		try:
			subprocess.check_output([self.config['POWERSHELL_PATH'], '-Command', 'Get-ADComputer "' + psescape(hostname + '$') + '"'], stderr=subprocess.STDOUT)
			return True
		except subprocess.CalledProcessError as e:
			self._log('ERROR', 'PowerShell call to find computer object ' + str(hostname) + ' returned ' + str(e.returncode))
			self._log('DEBUG', 'PowerShell output: ' + str(e.output))
			return False

	################################################################################

	@Pyro4.expose
	def delete_computer_object(self, hostname):
		self._log('INFO', 'Removing computer object, ' + str(hostname))

		try:
			subprocess.check_output([self.config['POWERSHELL_PATH'], '-Command', 'Get-ADComputer "' + psescape(hostname + '$') + '" | Remove-ADComputer -confirm:$false'], stderr=subprocess.STDOUT)
			return 0
		except subprocess.CalledProcessError as e:
			self._log('ERROR', 'PowerShell call to delete computer object on ' + str(hostname) + ' returned ' + str(e.returncode))
			self._log('DEBUG', 'PowerShell output: ' + str(e.output))
			return e.returncode

	################################################################################

	@Pyro4.expose
	def set_information(self, hostname, description, location):
		self._log('INFO', 'Setting information for computer, ' + str(hostname))

		try:
			subprocess.check_output([self.config['POWERSHELL_PATH'], '-Command', 'Set-ADComputer -Identity "' + psescape(hostname + '$') + '" -Description "' + psescape(description) + '" -Location "' + psescape(location) + '" -ManagedBy "' + psescape(self.config['MANAGED_BY']) + '"'], stderr=subprocess.STDOUT)
			return 0
		except subprocess.CalledProcessError as e:
			self._log('ERROR', 'PowerShell call to set information on ' + str(hostname) + ' returned ' + str(e.returncode))
			self._log('DEBUG', 'PowerShell output: ' + str(e.output))
			return e.returncode

	################################################################################

	@Pyro4.expose
	def ping(self):
		"""A simple test function to indicate if the daemon is up"""
		return True

# The object containing the configuration and code
rpc_handler = CortexWindowsRPC()
rpc_handler._log('INFO', 'Cortex Windows RPC Daemon starting up')

# Set up the Pyro4 daemon
daemon = Pyro4.Daemon(host="", port=rpc_handler.config['WINRPC_PORT'])
daemon._pyroHmacKey = rpc_handler.config['WINRPC_KEY']
daemon.register(rpc_handler, 'CortexWindowsRPC')
rpc_handler._log('INFO', 'Ready for instructions')
daemon.requestLoop()
